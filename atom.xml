<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[mitaku.log]]></title>
  <link href="http://mitaku.github.com/atom.xml" rel="self"/>
  <link href="http://mitaku.github.com/"/>
  <updated>2015-12-02T10:15:24+09:00</updated>
  <id>http://mitaku.github.com/</id>
  <author>
    <name><![CDATA[Takumi MIURA]]></name>
    <email><![CDATA[mitaku1104@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Rubyで可逆暗号]]></title>
    <link href="http://mitaku.github.com/blog/2015/12/02/ruby-reversible-cryptography/"/>
    <updated>2015-12-02T01:00:00+09:00</updated>
    <id>http://mitaku.github.com/blog/2015/12/02/ruby-reversible-cryptography</id>
    <content type="html"><![CDATA[<h2>はじめに</h2>

<p>これは <a href="http://www.adventar.org/calendars/1044">【その2】ドリコム Advent Calendar 2015</a> 2日目の記事です</p>

<p>1日目の記事はarihhさんの「<a href="http://arihh.hatenablog.jp/entry/2015/12/01/005948">カンバンの管理に改善を加えたら加速した話 - arihhのブログ</a>」です</p>

<p><a href="http://www.adventar.org/calendars/1043">【その1】ドリコム Advent Calendar 2015 - Adventar</a> もあります!</p>

<p>めっちゃブログ書くのが久しぶりで、このブログの更新の仕方を忘れてたりしました。</p>

<p><strong>あと、モンハンやりたい。モンハンやりたい、モンハンやりたい</strong></p>

<p><em>※エンジニア向けの記事です</em></p>

<h2>本題 - 「Rubyで可逆暗号-その情報を知りたくない僕らは」</h2>

<p>生データとして扱いたくない情報を難読化する話をします!</p>

<p><em>※エンジニア向けの記事です</em></p>

<h3>(エンジニアの自分が)生データとして扱いたくない情報</h3>

<ul>
<li>何かのアカウント(ID/PW)</li>
<li>自分のものじゃない秘密鍵</li>
<li>ユニークなギフトコード</li>
<li>etc&hellip;</li>
</ul>


<p>などなど。思い当たるものはないでしょうか？</p>

<hr />

<p>最近、ドリコムではAWSの活用事例が増えてきました。</p>

<p>AWSを便利に活用させていただいているのですが、必然的にアクセスキーやシークレットキーを取り扱う必要がでてきます。</p>

<p>アクセスキーとシークレットキーが漏れたりすると何が起こるかわかりません。</p>

<p><strong>情報漏えいはシステムよりも人間が原因になることのほうが多い</strong>と教わってきたので</p>

<p>個人的には知らなくてよければ知らないまま過ごしたい情報です。</p>

<p>なので、少しでも心を穏やかにするために、生のデータを扱うの避けて、一工夫して運用しています。</p>

<h3>Rubyで可逆暗号</h3>

<h4>ActiveSupport::MessageEncryptor</h4>

<p>みんなだいすき<code>ActiveSupport</code></p>

<p>それ、<code>ActiveSupport::MessageEncryptor</code>でできるよ!!</p>

<p><a href="http://qiita.com/kengos@github/items/e8ea8f71c47852fde48b">Railsで簡単可逆暗号(ActiveSupport::MessageEncryptor)</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">secret</span> <span class="o">=</span> <span class="ss">SecureRandom</span><span class="p">:</span><span class="ss">:hex</span><span class="p">(</span><span class="mi">128</span><span class="p">)</span>
</span><span class='line'><span class="c1">#=&gt; &quot;13f3bab71cc735eea473e8fd225bb04232d23eadf194bd066179e09871fdf9244b454c38ebd6715e03b903d595b8ac5d75488dff2d9d48f3d2eb5e9a026ebbb4ef799e9596376f63a49640e9336f9b011fa8972a763a6d1fe13b5d4d096a34cdeba91636c86b70e9a88fab56f2a4f6b19eee801ac0d1e3415bb17b8f92f0133b&quot;</span>
</span><span class='line'><span class="n">encryptor</span> <span class="o">=</span> <span class="o">::</span><span class="ss">ActiveSupport</span><span class="p">:</span><span class="ss">:MessageEncryptor</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">secret</span><span class="p">,</span> <span class="ss">cipher</span><span class="p">:</span> <span class="s1">&#39;aes-256-cbc&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">encrypt_message</span> <span class="o">=</span> <span class="n">encryptor</span><span class="o">.</span><span class="n">encrypt_and_sign</span><span class="p">(</span><span class="s2">&quot;target_message&quot;</span><span class="p">)</span>
</span><span class='line'><span class="c1">#=&gt; &quot;QjlkVndyeERrV3BUcW1paVVkTDJQTWhzV3R5OEV3N3JsR2FnV0VxRjdCTT0tLUJFSmdLTUNFbHdmZHhWcjZUQllUR0E9PQ==--6f6d897b52cfad56d9a31f8a19d44481e5343f18&quot;</span>
</span><span class='line'><span class="n">encryptor</span><span class="o">.</span><span class="n">decrypt_and_verify</span><span class="p">(</span><span class="n">encrypt_message</span><span class="p">)</span> <span class="o">==</span> <span class="s2">&quot;target_message&quot;</span>
</span><span class='line'><span class="c1">#=&gt; true</span>
</span></code></pre></td></tr></table></div></figure>


<p>便利ですね。
これだけだと芸がないので、ドリコムでの事例を紹介します!</p>

<h4>ReversibleCryptography</h4>

<p><a href="https://github.com/mitaku/reversible_cryptography">reversible_cryptography</a>
という自作gemを使ってます。</p>

<p>READMEより</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">secret</span> <span class="o">=</span> <span class="s2">&quot;password&quot;</span>
</span><span class='line'><span class="n">encrypted_message</span> <span class="o">=</span> <span class="ss">ReversibleCryptography</span><span class="p">:</span><span class="ss">:Message</span><span class="o">.</span><span class="n">encrypt</span><span class="p">(</span><span class="s2">&quot;target_message&quot;</span><span class="p">,</span> <span class="n">secret</span><span class="p">)</span>
</span><span class='line'><span class="c1">#=&gt; &quot;md5:388eeae24576572f946e9043a2118b2d:salt:161-225-182-109-143-90-1-28:aes-256-cfb:DHY6DF3+iFzH36FMbeI=&quot;</span>
</span><span class='line'><span class="ss">ReversibleCryptography</span><span class="p">:</span><span class="ss">:Message</span><span class="o">.</span><span class="n">decrypt</span><span class="p">(</span><span class="n">encrypted_message</span><span class="p">,</span> <span class="n">secret</span><span class="p">)</span> <span class="o">==</span> <span class="s2">&quot;target_message&quot;</span>
</span><span class='line'><span class="c1">#=&gt; true</span>
</span></code></pre></td></tr></table></div></figure>


<p>簡単ですね。</p>

<ul>
<li><em>※上記例とは暗号化方式等,諸々違うため堅牢度合いは違います</em></li>
<li><em>※暗号化するものが簡単な英単語だったりする場合,MD5から逆引きされる可能性があります</em></li>
<li><em>※パスワードの強度は高いものを利用しています</em></li>
</ul>


<h3>もう一工夫</h3>

<p>Railsに限った話ではないですがアプリでの利用方法も記載します</p>

<p>各種設定はyamlファイルに記載することが多く、
このようにYAMLのプライベートタイプを追加し環境変数を利用するようにしています。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">ReversibleEncryptedString</span> <span class="o">&lt;</span> <span class="no">BasicObject</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">str</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@str</span> <span class="o">=</span> <span class="n">str</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">decrypted_string</span>
</span><span class='line'>    <span class="vi">@raw</span> <span class="o">||=</span> <span class="o">::</span><span class="ss">ReversibleCryptography</span><span class="p">:</span><span class="ss">:Message</span><span class="o">.</span><span class="n">decrypt</span><span class="p">(</span><span class="vi">@str</span><span class="p">,</span> <span class="o">::</span><span class="no">ENV</span><span class="o">[</span><span class="s2">&quot;REVERSIBLE_CRYPTOGRAPY_SECRET&quot;</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">alias_method</span> <span class="ss">:to_s</span><span class="p">,</span> <span class="ss">:decrypted_string</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">method_missing</span><span class="p">(</span><span class="nb">method</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">)</span>
</span><span class='line'>    <span class="n">decrypted_string</span><span class="o">.</span><span class="n">__send__</span><span class="p">(</span><span class="nb">method</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">YAML</span><span class="o">.</span><span class="n">add_private_type</span><span class="p">(</span><span class="s2">&quot;Encrypted&quot;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">_type</span><span class="p">,</span> <span class="n">val</span><span class="o">|</span>
</span><span class='line'>  <span class="no">ReversibleEncryptedString</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">val</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">aws</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">endpoint</span><span class="p-Indicator">:</span> <span class="s">&quot;ec2.ap-northeast-1.amazonaws.com&quot;</span>
</span><span class='line'>  <span class="l-Scalar-Plain">access_key_id</span><span class="p-Indicator">:</span> <span class="kt">!x-private</span><span class="l-Scalar-Plain">:Encrypted &quot;md5:109a42207275ce753e4923575ace3e12:salt:255-105-253-88-5-107-47-24:aes-256-cfb:4n++p1w8WZrjzmjna8W1mqh6PSA=&quot;</span>
</span><span class='line'>  <span class="l-Scalar-Plain">secret_access_key</span><span class="p-Indicator">:</span> <span class="kt">!x-private</span><span class="l-Scalar-Plain">:Encrypted &quot;md5:7844e3da7a807eb915207f7a36d4087b:salt:54-109-31-32-93-207-203-85:aes-256-cfb:l1OeNofj0C+vlsWfPfrTwQ==&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>環境変数の設定には<a href="https://github.com/bkeepers/dotenv">Dotenv</a>を利用しているところもあります。</p>

<h3>ReversibleCryptographyの活用プロダクト</h3>

<p>弊社sue445さんのgemでも利用されています!</p>

<ul>
<li><a href="https://github.com/sue445/itamae-plugin-resource-encrypted_remote_file">itamae-plugin-resource-encrypted_remote_file gem</a></li>
<li><a href="http://sue445.hatenablog.com/entry/2015/05/09/185807">itamae-plugin-resource-encrypted_remote_file を作った</a></li>
</ul>


<h2>おわりに</h2>

<ul>
<li><strong>情報漏えいは人が原因のほうが多い!</strong></li>
<li>意識をしつつ、健全な開発をしましょう!</li>
<li>知りたくない情報は暗号化してからもらいましょう!</li>
<li>可逆暗号ができる<a href="https://github.com/mitaku/reversible_cryptography">ReversibleCryptography</a>gemの紹介をしました</li>
<li>気が向いたら使ってみてもらえれば幸いです!</li>
</ul>


<p>ということで次はnakajiさんです!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RubyKaigi2014で発表した]]></title>
    <link href="http://mitaku.github.com/blog/2014/09/22/rubykaigi-2014-speech/"/>
    <updated>2014-09-22T22:42:12+09:00</updated>
    <id>http://mitaku.github.com/blog/2014/09/22/rubykaigi-2014-speech</id>
    <content type="html"><![CDATA[<p>RubyKaigi 2014めっちゃいいKaigiだった。</p>

<h2>初めての発表</h2>

<p>今回初めてSpeakerとしてRubyKaigiに参加した。</p>

<p><a href="http://rubykaigi.org/2014/presentation/S-TakumiMiura">発表者情報</a></p>

<h3>感想</h3>

<p>めっちゃ緊張した。</p>

<p>でも会議っぽい(?)写真取りたかったので、こんなことをしてみたり</p>

<p><img src="http://photos-d.ak.instagram.com/hphotos-ak-xfa1/10654988_1524824864402355_142010473_n.jpg" alt="photo" /></p>

<p>セミインターナショナルなKaigiということで発表自体は日本語だったけれどもスライドは英語にしようと思ってせっせと準備をしました。</p>

<p>結構なスライドの枚数になってしまい通訳の方が大変だったんじゃないかとすごく思う。
また、RubyKaigiのスタッフの方々がスライドチェックなどをしてくれて少しはまともな資料になりました！</p>

<p>通訳の方、スタッフのみなさんありがとうございました!</p>

<h3>スライド</h3>

<script async class="speakerdeck-embed" data-id="ed2e4fa0221e0132318076af556e37c5" data-ratio="1.33333333333333" src="//speakerdeck.com/assets/embed.js"></script>


<h2>&ldquo;Gem of this Week&rdquo; - building culture and making gem</h2>

<p>というタイトルで発表をした。</p>

<p>内容は僕が転職をして1年かけてカジュアルにgemを作るチームを作ってきた話。</p>

<p><strong>今週のgem</strong>というコーナーで毎週のようにgemが更新されたり作成されていく環境を見せることができるようになったのでgemを作ることが<strong>特別</strong>じゃなくしました。</p>

<p>その結果チームメンバーがカジュアルにgemを作るようになった。</p>

<h4>想い</h4>

<p>今週のgemを初めた時の想いとしては</p>

<ul>
<li>もっと楽したい。</li>
<li>楽しいことをしていたい。</li>
<li>同じことを繰り返したくない。</li>
</ul>


<p>だった。</p>

<p>発表することになった時に
同じように共通化して社内gemみたいなの作って楽になる人たちはいっぱいいるんじゃないかと思った。
僕のとったアプローチの紹介をすることによっていろんな人の生活が良くなればいいなぁなんて想いながら発表準備をしてました。</p>

<h3>アプローチのまとめ</h3>

<h4>privateなgemserverを用意する</h4>

<ul>
<li>弊社は<a href="https://github.com/geminabox/geminabox">geminabox</a>を使ってる</li>
<li>privateなのでどんなgemをアップしても大丈夫</li>
<li>メンテされていないgemへの辛いモンキーパッチはforkしてgem化できる</li>
</ul>


<p>※deployの観点からgemにしているほうが気楽だった</p>

<p>※Gemfileでgitのsourceを指定するという手段もある</p>

<h4>自由にgitリポジトリを作れるようにする</h4>

<ul>
<li>弊社はGitLabを使っている。</li>
<li>メンバーは自由に他のプロジェクトを見ることができる</li>
<li>メンバーは自由にプロジェクトを作ることができる</li>
</ul>


<h4>コミュニケーションできる場を作る</h4>

<ul>
<li>作ったgemのアナウンスをしたり、理想の開発とか語ったり</li>
<li>弊社は週に1回各チームのメインエンジニアが集まるミーティングがあり、そこでアナウンスをしたりしていた。(今週のgem)</li>
</ul>


<h4>+αとしてgemを作る障壁を下げていく</h4>

<ul>
<li>gemとはカジュアルに作るものであるというイメージ化 <code>今週のgem</code></li>
<li>gemを簡単に作り、簡単にデプロイできるgemを作る <code>drecom_gem</code></li>
<li>新卒の子にも作ってもらった</li>
<li>多くのgemを作っていくことによって、参考例をたくさん作った</li>
</ul>


<h3>雑記</h3>

<p>読み原稿的なのも一緒にアップすればよかったな&hellip;</p>

<p>別の記事で書きたいと思います!</p>

<p><img src="http://rubykaigi.org/2014/images/badge-for-speaker.png" alt="speaker" />
<img src="http://rubykaigi.org/2014/images/badge-for-official-sponsor.png" alt="sponsor" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2013年 振り返り]]></title>
    <link href="http://mitaku.github.com/blog/2014/01/01/retrospective-2013/"/>
    <updated>2014-01-01T00:58:42+09:00</updated>
    <id>http://mitaku.github.com/blog/2014/01/01/retrospective-2013</id>
    <content type="html"><![CDATA[<p>転職記事書いてから全く書いてなかった三浦です。</p>

<p>あけましておめでとうございます。</p>

<p>もう2014年になっちゃったけど、2013年の振り返り</p>

<h2>買ってよかったもの</h2>

<h3>iPad mini Retina</h3>

<ul>
<li>もっぱらKindleしか使ってないからKindleで良かった説は否めないが、Webページ見たり映画みたりで活躍してるので買ってよかった</li>
<li>容量はいつも悩むけど正直そんないらんのだよな&hellip;</li>
</ul>


<h3>PS3</h3>

<ul>
<li>ASBをやるために買ったけど&hellip;ASB&hellip;&hellip;.</li>
</ul>


<h3>torne と HDMIケーブル</h3>

<ul>
<li>HDMI綺麗、torne便利。nasneも買ってもいいかもなぁと思った</li>
</ul>


<h3>SONY ステレオヘッドホン MDR-7506</h3>

<ul>
<li>お薦めされたので買っちゃった。職場で集中する時用</li>
</ul>


<h3>ジョジョの奇妙な冒険1部〜7部(電子書籍)</h3>

<ul>
<li>大人買い</li>
</ul>


<h3>ダーツ</h3>

<ul>
<li>練習中</li>
</ul>


<h3>ソルティライチ1.5L * 8本セット * 14</h3>

<ul>
<li>2013/12/22: 2</li>
<li>2013/11/22: 2</li>
<li>2013/10/28: 2</li>
<li>2013/09/23: 2</li>
<li>2013/08/22: 2</li>
<li>2013/07/01: 1</li>
<li>2013/04/01: 1</li>
<li>2013/02/13: 1</li>
<li>2013/01/20: 1
買いすぎですね</li>
</ul>


<h2>転職</h2>

<ul>
<li>2013年の7月に転職しました。
<img src="http://farm6.staticflickr.com/5473/11669935045_f2e4a11d57_n.jpg" alt="photo" /></li>
</ul>


<p>この辺の話はまた別の記事にしよう。Zzz&hellip;</p>

<p>全然振り返ってないや&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[株式会社オプティムを退職しました。]]></title>
    <link href="http://mitaku.github.com/blog/2013/07/15/retired-from-optim/"/>
    <updated>2013-07-15T10:36:00+09:00</updated>
    <id>http://mitaku.github.com/blog/2013/07/15/retired-from-optim</id>
    <content type="html"><![CDATA[<h2>三浦、会社やめるってよ</h2>

<p>私事ですが2013/07/14に株式会社オプティムを退職しました。</p>

<p>新卒として入社して4年と少しの間、とても濃密な時間を過ごし、多くの人と一緒に色々なことができました。</p>

<p>苦しい時間もいっぱいありましたが、とても楽しい時間を素敵な仲間と過ごせたと思います。</p>

<p>自分自身が叩いた<code>rails new</code>コマンドで作られたプロダクトが何個も世に出ました。
これらは自分の子供らのようなものだと思うので、とても思い入れが深いです。
それ故に、政治的な事情で技術的負債を抱え続けなければならなくなったりすると思いをぶつけたり、不貞腐れたりしました（笑）</p>

<p>次第にコードを書く時間が減ってきて、一日中メールを書いていたり、レビューしたり、割り込みに対する対応を1日中やっていて本質的な問題の技術的解決もできなくなってき、やりたいことが公私共にできなくなってきて自分らしくないなと思い始めていました。
1年とモヤモヤしたまま時が過ぎて、多くの先輩と話をしてきて、短い人生なのだから今やりたいことをやらなければいけないなと思い、転職に至りました。</p>

<p><strong>いつやるの？今でしょ。</strong></p>

<hr />

<h3>何をやっていたか</h3>

<ul>
<li>主にRailsでのWeb開発</li>
<li>火消し</li>
<li>広報</li>
<li>社内勉強会</li>
<li>リーダー</li>
<li>社内ツール作成</li>
<li>Bot作成</li>
<li>etc&hellip;</li>
</ul>


<p>品質保証であったり、研究開発だったり幅広く経験させてもらえました。
基本的にはRuby、Rubyしていたと思います。</p>

<p>Railsのバージョンを上げる仕事をしたり、<code>image_path</code>とかこのへんのメソッドを上書きする暗黒プロジェクトを経験したり
新規でプロダクトを開発したり、残念なブランチが切られないようにRails Engine化したり、色々と試行錯誤して、成長してきたんじゃないかな</p>

<hr />

<h2>戦友たちへ</h2>

<p><strong>どうもありがとう。</strong></p>

<p>何個か経験した炎上案件、正直肉体的に苦しかったことが多かった気がする。</p>

<p>でも精神的に苦しかったかというと、うん、苦しかったな。</p>

<p>その中でも一緒に苦しい時間を共にした戦友が何人かいる。</p>

<p>ボロボロになりながら、製品を作って、それを納品した日の達成感を今でも覚えています。</p>

<p>本当にありがとう。そして、お互い身体に気をつけよう。</p>

<h2>今後</h2>

<p>オプティムで学んだ事を活かして、BtoBから少し離れたところで挑戦します。</p>

<p><img src="http://farm3.staticflickr.com/2872/9288755191_52dd792217_n.jpg" alt="photo" /></p>

<p>今まで以上にコミュニティでの活動はしていきたいと思っているのでこの狭い業界のどこかであったらよろしくお願いします。</p>

<p><a href="http://www.amazon.co.jp/registry/wishlist/5T0A6N2ZGEZD">wishlist</a>も晒しておきますね。</p>

<p>オプティムのみなさん、社外のみなさん、ありがとうございました。</p>

<p>ではでは、次回作にご期待ください。</p>

<p><strong>Life is short!</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails4でのRSpec自動実行環境の作成]]></title>
    <link href="http://mitaku.github.com/blog/2013/07/10/rails4-testing-automation/"/>
    <updated>2013-07-10T00:15:00+09:00</updated>
    <id>http://mitaku.github.com/blog/2013/07/10/rails4-testing-automation</id>
    <content type="html"><![CDATA[<p>Rails4アプリでファイルの変更を検知し、RSpecを実行するようにする。
テストの結果はGrowlにて通知するようにする</p>

<h2>環境</h2>

<ul>
<li>Ruby 2.0.0</li>
<li>Rails 4.0.0</li>
<li>Mac OS X 10.8</li>
</ul>


<h2>利用するもの</h2>

<ul>
<li>Rspec</li>
<li>BDDフレームワーク</li>
<li>Guard</li>
<li>監視・実行の管理</li>
<li>Growl</li>
<li>通知</li>
<li>Spring</li>
<li>事前にアプリを立て、コマンドの実行を高速化する</li>
</ul>


<h2>準備</h2>

<h3>Gemfileの更新</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">group</span> <span class="ss">:development</span><span class="p">,</span> <span class="ss">:test</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;rspec-rails&#39;</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;spring&#39;</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;guard&#39;</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;guard-rspec&#39;</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;growl&#39;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>bundle install</code></p>

<h3>rspec:install</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">spring</span> <span class="n">g</span> <span class="ss">rspec</span><span class="p">:</span><span class="n">install</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>spec/spec_helper.rb</code>などが作成される</p>

<h3>guard init</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gurad</span> <span class="n">init</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>Guardfile</code>というGuardの設定を記述するファイルが生成される</p>

<h3>guard rspecでspringを使うようにする</h3>

<p><code>guard :rspec do</code>という記述を<code>guard :rspec, spring: true do</code>に変更する
これによってguardでrspecが動く場合にspringで立てたテスト用のプロセスで実行されるようになる</p>

<p>基本的に作業はこれだけ。
あとはファイルを更新してテストが走ったり、通知がいくことを確認できれば問題なし。</p>

<p>かなり簡単に自動でテストが回る環境が作れた。
無意識にテストが実行されフィードバックが返ってくるのはとてもよい。</p>

<p>Rails4が出たということで<code>database_cleaner</code>を始め開発環境を再度整えて行きたい</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HomebrewでRictyをインストール]]></title>
    <link href="http://mitaku.github.com/blog/2013/07/08/installed-ricty/"/>
    <updated>2013-07-08T19:01:00+09:00</updated>
    <id>http://mitaku.github.com/blog/2013/07/08/installed-ricty</id>
    <content type="html"><![CDATA[<p>個人的にとても見やすいフォントのRictyをHomebrewで手軽にインストールできるみたいですね。</p>

<ul>
<li><a href="http://morizyun.github.io/blog/ricty-font-homebrew-mac/">プログラムに最適なフォント『Ricty』を超簡単にインストール[Mac限定]</a></li>
</ul>


<p>こちらのとおりに</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>brew tap sanemat/font
</span><span class='line'>brew install ricty</span></code></pre></td></tr></table></div></figure>


<p>しばらくするとインストールが終わるので、表示されるメッセージに従ってコマンドを実行</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>***************************************************
</span><span class='line'>Generated files:
</span><span class='line'>  /usr/local/Cellar/ricty/3.2.1/share/fonts/Ricty-Bold.ttf
</span><span class='line'>  /usr/local/Cellar/ricty/3.2.1/share/fonts/Ricty-Regular.ttf
</span><span class='line'>  /usr/local/Cellar/ricty/3.2.1/share/fonts/RictyDiscord-Bold.ttf
</span><span class='line'>  /usr/local/Cellar/ricty/3.2.1/share/fonts/RictyDiscord-Regular.ttf
</span><span class='line'>***************************************************
</span><span class='line'>To install Ricty:
</span><span class='line'>  $ cp -f /usr/local/Cellar/ricty/3.2.1/share/fonts/Ricty*.ttf ~/Library/Fonts/
</span><span class='line'>  $ fc-cache -vf
</span><span class='line'>***************************************************</span></code></pre></td></tr></table></div></figure>


<p>こんなメッセージが出ていました。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>brew info ricty</span></code></pre></td></tr></table></div></figure>


<p>で再度見れます。</p>

<p>便利便利</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails4でアプリケーションを作る]]></title>
    <link href="http://mitaku.github.com/blog/2013/07/07/generate-rails4-app/"/>
    <updated>2013-07-07T01:29:00+09:00</updated>
    <id>http://mitaku.github.com/blog/2013/07/07/generate-rails4-app</id>
    <content type="html"><![CDATA[<p>6/25 <a href="http://weblog.rubyonrails.org/2013/6/25/Rails-4-0-final/">Rails4.0.0がリリース</a>されました。</p>

<p>ということで早速Rails4でプロジェクトを作成。</p>

<ul>
<li>Ruby 2.0.0-p247</li>
<li>Rails 4.0.0</li>
<li>Mac OS X 10.8.7</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gem install rails</span></code></pre></td></tr></table></div></figure>


<h2>プロジェクトの作成</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rails new your_project_name -B -T -d mysql</span></code></pre></td></tr></table></div></figure>


<ul>
<li>rails new後のbundle installがとても嫌いなのでskip-bundleをしたいので<code>-B</code>オプションを付与</li>
<li>test-unitではなくRspecを使いたいので<code>-T</code>でTest::Unitのファイルが作成されるのを回避</li>
<li>今回はDBをMySQLにしたかったので<code>-d mysql</code></li>
<li>デフォルトはsqlite3</li>
</ul>


<h3>tree</h3>

<p>作られたファイルの確認</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>.
</span><span class='line'>├── Gemfile
</span><span class='line'>├── README.rdoc
</span><span class='line'>├── Rakefile
</span><span class='line'>├── app
</span><span class='line'>│   ├── assets
</span><span class='line'>│   │   ├── images
</span><span class='line'>│   │   ├── javascripts
</span><span class='line'>│   │   │   └── application.js
</span><span class='line'>│   │   └── stylesheets
</span><span class='line'>│   │       └── application.css
</span><span class='line'>│   ├── controllers
</span><span class='line'>│   │   ├── application_controller.rb
</span><span class='line'>│   │   └── concerns
</span><span class='line'>│   ├── helpers
</span><span class='line'>│   │   └── application_helper.rb
</span><span class='line'>│   ├── mailers
</span><span class='line'>│   ├── models
</span><span class='line'>│   │   └── concerns
</span><span class='line'>│   └── views
</span><span class='line'>│       └── layouts
</span><span class='line'>│           └── application.html.erb
</span><span class='line'>├── bin
</span><span class='line'>│   ├── bundle
</span><span class='line'>│   ├── rails
</span><span class='line'>│   └── rake
</span><span class='line'>├── config
</span><span class='line'>│   ├── application.rb
</span><span class='line'>│   ├── boot.rb
</span><span class='line'>│   ├── database.yml
</span><span class='line'>│   ├── environment.rb
</span><span class='line'>│   ├── environments
</span><span class='line'>│   │   ├── development.rb
</span><span class='line'>│   │   ├── production.rb
</span><span class='line'>│   │   └── test.rb
</span><span class='line'>│   ├── initializers
</span><span class='line'>│   │   ├── backtrace_silencers.rb
</span><span class='line'>│   │   ├── filter_parameter_logging.rb
</span><span class='line'>│   │   ├── inflections.rb
</span><span class='line'>│   │   ├── mime_types.rb
</span><span class='line'>│   │   ├── secret_token.rb
</span><span class='line'>│   │   ├── session_store.rb
</span><span class='line'>│   │   └── wrap_parameters.rb
</span><span class='line'>│   ├── locales
</span><span class='line'>│   │   └── en.yml
</span><span class='line'>│   └── routes.rb
</span><span class='line'>├── config.ru
</span><span class='line'>├── db
</span><span class='line'>│   └── seeds.rb
</span><span class='line'>├── lib
</span><span class='line'>│   ├── assets
</span><span class='line'>│   └── tasks
</span><span class='line'>├── log
</span><span class='line'>├── public
</span><span class='line'>│   ├── 404.html
</span><span class='line'>│   ├── 422.html
</span><span class='line'>│   ├── 500.html
</span><span class='line'>│   ├── favicon.ico
</span><span class='line'>│   └── robots.txt
</span><span class='line'>├── tmp
</span><span class='line'>│   └── cache
</span><span class='line'>│       └── assets
</span><span class='line'>└── vendor
</span><span class='line'>    └── assets
</span><span class='line'>        ├── javascripts
</span><span class='line'>        └── stylesheets
</span><span class='line'>
</span><span class='line'>31 directories, 34 files</span></code></pre></td></tr></table></div></figure>


<p>binやapp/models/concernsなどが増えていますね!</p>

<h2>rspec-railsの導入</h2>

<p><a href="https://github.com/rspec/rspec-rails">rspec/rspec-rails</a>に従って</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># Gemfileに追加
</span><span class='line'>group :development, :test do
</span><span class='line'>  gem 'rspec-rails', '~&gt; 2.0'
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bundle</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rails g rspec:install</span></code></pre></td></tr></table></div></figure>


<h2>db:create</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake db:crate</span></code></pre></td></tr></table></div></figure>


<h2>server start</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rails s</span></code></pre></td></tr></table></div></figure>


<p>そんな訳でとりあえず起動した。</p>

<p>rspecのくだりは別にいらなかったね。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[クリップボードを有効にしたVimを使う]]></title>
    <link href="http://mitaku.github.com/blog/2013/07/06/vim-enabled-clipboard/"/>
    <updated>2013-07-06T18:26:00+09:00</updated>
    <id>http://mitaku.github.com/blog/2013/07/06/vim-enabled-clipboard</id>
    <content type="html"><![CDATA[<p>MacのVimは初期状態でclipboardが有効になっていなくて辛いのでvimからclipboardが使えるようにする</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>vim --version |grep clipboard</span></code></pre></td></tr></table></div></figure>


<p>結果</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>-clientserver -clipboard +cmdline_compl +cmdline_hist +cmdline_info +comments
</span><span class='line'> -xterm_clipboard -xterm_save</span></code></pre></td></tr></table></div></figure>


<p>現時点ではHomebrewのVimのFormulaはclipboardに対するオプションがないみたいなのでMercurialからソースを持ってきて対応する</p>

<h2>1. hgコマンドを使えるようにする</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>brew install hg</span></code></pre></td></tr></table></div></figure>


<h2>2. vimをinstall</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>hg clone https://vim.googlecode.com/hg/ /tmp/vim
</span><span class='line'>cd /tmp/vim
</span><span class='line'>make clean
</span><span class='line'>./configure --prefix=/usr/local --enable-multibyte --enable-xim --enable-fontset --enable-rubyinterp --enable-perlinterp --with-features=huge --disable-selinux
</span><span class='line'>make
</span><span class='line'>make install</span></code></pre></td></tr></table></div></figure>


<h2>3. 確認</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/usr/local/vim --version |grep clipboard</span></code></pre></td></tr></table></div></figure>


<p><code>+clipboard</code>が含まれていればOK</p>

<p>configureに与えるものは各自必要なものを指定すること</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[高専カンファレンス5周年記念パーティー]]></title>
    <link href="http://mitaku.github.com/blog/2013/06/27/present-kosenconf-5th-anniversary/"/>
    <updated>2013-06-27T15:53:00+09:00</updated>
    <id>http://mitaku.github.com/blog/2013/06/27/present-kosenconf-5th-anniversary</id>
    <content type="html"><![CDATA[<p>6/15に行われた高専カンファレンス5周年記念パーティーに参加してきた。</p>

<p>高専カンファレンスで人生を(良い意味で)狂わされた自分自身としては、5周年というのはとても感慨深いものがあるなぁと老害オーラを出していた。</p>

<p>なんだかんだでいつも発表したり運営側にいるので、今回は1パーティーの参加者としておとなしくしていようと思ったのだが、なんというか会場の空気にやられて飛び入りLTをさせていただいた。（運営のみなさん、ありがとうございました）</p>

<h2>心地良い空気</h2>

<p>全然準備できなかったので、ネタもなにもないし、〆方も失敗した。</p>

<p>伝えたかったのは「空気」の話</p>

<p>高専カンファレンスに限った話じゃないが、いろんなイベントやいろんなコミュニティがあって、そこには様々な雰囲気があって、多くの楽しさや、問題があると思う。</p>

<p>僕はあの空気が好きだし、バカみたいなことをしているのを見ていてもそれなりに楽しい。</p>

<p>あの場には多くのエンターテイナーがいてコンテンツが充実していて楽しい。</p>

<p>ネットワーク職人だったり、配信職人もいるためUstreamで配信を見ていれば十分楽しいというのもわかる。</p>

<p>でも、Ustreamじゃ空気が伝わらない。</p>

<p>参加してみないと分からないものがあるから、試しに1度参加してみてもらいたい。</p>

<p>「高専カンファレンスに参加しにくい。」というのもわかる。</p>

<p>誰も知らない、何も知らない状態で参加しようとするのは勇気がいるなぁと思う。</p>

<p>それだけ、高専カンファレンスは浸透してきているし、複数回参加したことがある人が増えたり、TwitterやFacebookを始めとして参加者間でコミュニケーションが取られているのが事実としてあるので、内輪感が出てしまう。</p>

<p>(内輪感がないメジャーな勉強会をそんなに知らないので高専カンファレンス特有かはわからないが)</p>

<p>でも、あのコミュニティは暖かいから、ぜひ参加してみてほしい。</p>

<p>その上で、あの空気が好きだったら、ぜひ作る側になってほしい。</p>

<p>内輪感を作るなというのも難しい話だから、そこはできてしまうものとして考えた上で、初めて参加してくれる人への配慮を<strong>運営を含めた参加者</strong>ができるととても素敵だなぁと思う。</p>

<h2>さいごに</h2>

<p>運営のみなさん、会場を提供していただいたVOYAGE GROUPさん、参加者のみなさん</p>

<p>素敵な空気と時間をありがとうございました。とても楽しかったです。</p>

<p><strong>Happy anniversary!</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails寺子屋 x kosenconfを開催した]]></title>
    <link href="http://mitaku.github.com/blog/2013/03/27/rails-terakoya-kosenconf/"/>
    <updated>2013-03-27T22:38:00+09:00</updated>
    <id>http://mitaku.github.com/blog/2013/03/27/rails-terakoya-kosenconf</id>
    <content type="html"><![CDATA[<p>2013/03/23に<a href="http://rails.terakoya.io/">Rails寺子屋</a>というイベントを開催し、講師という立場で参加した。</p>

<p>午前10時という時間から開始ということで、寝坊だったり、遠方からの参加者は朝から東京に投げ出され大変そうだった印象。</p>

<p>あと、鉄道のICカード統一で駅が大変なことになっていた。速い人は5時くらいから並んでいるとか…</p>

<p>さて、寺子屋ですが</p>

<p>@RooandQoo ちゃんと一緒に1グループ担当しました。この日のために服装を揃えました（嘘です）</p>

<p><a href="http://www.flickr.com/photos/sora_h/8583674262/" title="P3233335 by sora_h, on Flickr"><img src="http://farm9.staticflickr.com/8509/8583674262_aab196bc06_z.jpg" width="640" height="480" alt="P3233335"></a></p>

<h3>午前</h3>

<p>午前中は環境構築をする時間として設けていて環境構築をしつつ、終わったメンバーと対談したりRubyで簡単なプログラムを書いてみたりしてました。</p>

<ul>
<li>RubyでFizzBuzzしてみたり</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">puts</span> <span class="mi">100</span><span class="o">.</span><span class="n">times</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span> <span class="p">(</span><span class="n">s</span> <span class="o">=</span> <span class="p">((</span><span class="n">i</span> <span class="o">%</span> <span class="mi">3</span><span class="p">)</span><span class="o">.</span><span class="n">zero?</span> <span class="p">?</span> <span class="s1">&#39;Fizz&#39;</span> <span class="p">:</span> <span class="s1">&#39;&#39;</span><span class="p">)</span> <span class="o">+</span> <span class="p">((</span><span class="n">i</span> <span class="o">%</span> <span class="mi">5</span><span class="p">)</span><span class="o">.</span><span class="n">zero?</span> <span class="p">?</span> <span class="s1">&#39;Buzz&#39;</span> <span class="p">:</span> <span class="s1">&#39;&#39;</span><span class="p">))</span><span class="o">.</span><span class="n">empty?</span> <span class="p">?</span> <span class="n">i</span> <span class="p">:</span> <span class="n">s</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>与えた文字をランダムで利用して140文字の文字列を作る遊びなど (下の例ではsを与える文字にしてます)</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">s</span> <span class="o">=</span> <span class="s2">&quot;みうらたくみ&quot;</span>
</span><span class='line'><span class="nb">puts</span> <span class="mi">140</span><span class="o">.</span><span class="n">times</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="n">s</span><span class="o">.</span><span class="n">chars</span><span class="o">.</span><span class="n">sample</span> <span class="p">}</span><span class="o">.</span><span class="n">join</span>
</span></code></pre></td></tr></table></div></figure>


<h3>午後</h3>

<p>ワークショップのメインということでRailsを使って簡単なアプリケーションを作ってみようというコーナーでした
ここでは<a href="http://railsgirls-jp.github.com/">Rails Girls</a>というイベントの教材を使って、<a href="http://www.heroku.com/">Heroku</a>にアプリケーションをデプロイするところまでやりました。</p>

<p>まずは、この教材の出来がとてもよい。</p>

<p>反日でRailsアプリを1つ作り、Herokuにデプロイし1サービスの提供者になれる。</p>

<p>基本的に教材にそってやっていき、都度必要な説明を講師陣で加えていくという形で行なって行きました。</p>

<p>無事全員がHerokuにデプロイするところまで行きました。素敵</p>

<h3>懇親会</h3>

<p>みんなでピザを頬張り、ワイワイしてました。</p>

<h3>感想</h3>

<p>Rails Girlsの教材はとてもよい。</p>

<p>Railsの手軽さは体験してもらうことはできたと思う。</p>

<p>ただし、学習コストが高いRailsなのでアフターサポート的なものがあるとよいのかなぁと思いました。</p>

<p>気軽に<a href="https://twitter.com/mitaku">@mitaku</a>までどうぞ！</p>

<p>参加者のみなさん、講師の皆さん、たくさんの関係者のみなさんありがとうございました！</p>

<p><em>楽しいRailsライフを!!</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rubyとの付き合い]]></title>
    <link href="http://mitaku.github.com/blog/2013/03/18/why-why-why-ruby/"/>
    <updated>2013-03-18T00:17:00+09:00</updated>
    <id>http://mitaku.github.com/blog/2013/03/18/why-why-why-ruby</id>
    <content type="html"><![CDATA[<p>もうすぐ社会人になってから4年が経とうとしている。</p>

<p>その社会人生活の中で「Ruby」という素晴らしいツールと触れていた時間がとても多かった</p>

<p>振り返ってみたので、形に残そうと思う。</p>

<p>長文になっちゃいそうだ</p>

<h3>ボクはRubyが好きだ</h3>

<p><code>Rubyをキメると気持ちいい</code></p>

<p>RubyKaigi2008のときにまつもとゆきひろさんの名言</p>

<p>Rubyを書いていると楽しい</p>

<p>Rubyっぽく書けたらすごく嬉しい</p>

<p>ボクはRubyが好きだ。</p>

<p>Rubyを使っている人たちも好きだ</p>

<p>Rubyコミュニティが好きだ</p>

<h3>仕事の武器としてのRuby</h3>

<p>現在Rubyを1つの武器として、仕事をしている。</p>

<p>最近の嬉しいニュースとして</p>

<p>2012年の12月に片手間で進んだプロジェクトが最近リリースされ、はじめてのユーザーがついたらしい。嬉しい。</p>

<p>学生時代はRubyを触ったことなんかなかったが、今や立派な武器になっている。</p>

<h4>きっかけ</h4>

<p>2009年の4月、アルバイトをしていた現在の会社に新入社員として入社した。</p>

<p>当時は日本の家庭に配布されるWindowsアプリケーションの検証作業をしていた。</p>

<p>大黒柱的な存在のプロジェクトの一員として時間を過ごしていた。（はず）</p>

<p>ただ、Excelの表を埋める作業というのはボクは好きになれず、楽しくはないのでモヤモヤしてた。</p>

<p>風通しのよい職場なので日報や呑み会の席で「コード書きたい！」的なことを延々と言ってた。</p>

<p>時には社長に、時には開発の責任者に、時にはプロジェクトのマネージャに</p>

<p>今思うと、よく言ってたなぁ</p>

<p>そしたら6月の夜中に、当時のマネージャから異動の話をもらった。</p>

<p>そのシーンがすごく印象的で今でも覚えている。Rubyと付き合い始めるきっかけである。</p>

<p>異動先のプロジェクトは研究開発プロジェクト。</p>

<p>そこで<a href="http://rubyonrails.org">Ruby on Rails</a>を使って世界を変えるアプリケーションの開発をすることになった。</p>

<h4>挑戦と野望</h4>

<ul>
<li>当時のスキルセット</li>
<li>C/C++ (学校で習う程度)</li>
<li>C# (趣味でアプリケーション作る程度)</li>
<li>Windows (Win32 API叩いて遊ぶ程度)</li>
<li>Linux (基本的な操作がCUIでできる程度)</li>
<li>HTML/CSS/Javascript (趣味でホームページ作る程度)</li>
</ul>


<p>そこはとても苦しく、楽しい世界だった。</p>

<ul>
<li>Ruby</li>
<li>Ruby on Rails</li>
<li>Webアプリケーション</li>
<li>MVC</li>
<li>MySQL</li>
</ul>


<p>全てが新鮮で、全てが力不足で、全てが刺激的だった.</p>

<p>環境構築には当たり前のように躓き、貧弱な<code>.vimrc</code>で戦っていたなぁ…</p>

<p>当時は<code>bundler</code>なんてなかったから、アプリケーションの起動にすら苦労した記憶がある</p>

<p>若いメンバーで構成されているプロジェクトで、社内にRubyのエンジニアはほとんどいなかった。</p>

<p>なるべくして、Rails Wayから外れたアプリケーションになっていた。</p>

<p>ボクとしては、すごくチャンスに感じていて</p>

<p>これなら、社内で(Ruby on Railsの)エンジニアとしてトップに立てるんじゃないかと思って、そこからRubyとの激しい付き合いが始まった。</p>

<p>社内で勉強会を開催したり、趣味でアプリケーションを作ってみたり、来週作るであろう機能を家でプロトタイピングしてみたり</p>

<p>とにかく手を動かしていた印象がある。</p>

<p>未熟者のボクに多くのことを教えてくださった、</p>

<p>プロジェクトのメインプログラマの人たちがやめるタイミングが1つの進化のきっかけだったのかもしれない。</p>

<p>よりRubyやRailsの知識が求められるようになって、より高度なことを任せてもらえるようになった。</p>

<p>疑問の答えを持っている人が社内にいなくなったときに、外の世界へ飛び出した。</p>

<ul>
<li>RubyKaigi</li>
<li>Coffee.rb</li>
<li>デブサミ</li>
<li>etc&hellip;</li>
</ul>


<p>外の世界は刺激的で、何かを患っている人がいっぱいいて、仲間がいて、楽しかった。</p>

<h4>暗黒魔法</h4>

<p>Ruby on RailsにはPluginという機構がある。</p>

<p>事業の拡大とともにアプリケーションを使ってくれる人が増え、要望も増え</p>

<p>ブランチ開発にも飽きたのでプラグインで差分を吸収できるようにしたかった。</p>

<p>Pluginを使うにはRails2.3に上げる必要があったので、脱線しているRailsレガシープロジェクトを2.3に上げる必要が出てきた。</p>

<p>すげー苦しかった。(笑)</p>

<ul>
<li>そもそもアプリケーションが起動しない</li>
<li>ありがちなメソッド名のヘルパーがRailsに追加されて(プロジェクトで使ってて)動かなかった</li>
<li>動かないGemは出てきてモンキーパッチを当てる</li>
<li>そもそも通ってないテストコードがいっぱいいた</li>
<li>嘘をついているコメント</li>
<li>意図が分からないコード</li>
</ul>


<p>こんな状態なので作業自体が見積もれなくて、進捗も分からなかったし有識者もいなくて、困った。</p>

<p>結果的にプロジェクトへの理解は深まったし、Railsにも少し詳しくなれた気がする。</p>

<p>そうそう、この時のハイライトといったらとある目的を達成するために</p>

<p><code>image_path</code>とか<code>image_tag</code>に<code>alias_method_chain</code>とかしてる当たりがエグい</p>

<p>黒魔術とかそういう次元じゃなくて暗黒魔法だった。今もそれを利用されてて、泣きたい。</p>

<h4>自由な空</h4>

<p>2年目の3月に大きな挑戦のチャンスをもらえた。</p>

<p>スマートフォンの法人利用が増えてきて、新たなビジネスの波が生まれた。</p>

<p>そのとき、以前から関わっているプロジェクトのスマートフォン対応が必要になった。</p>

<p>ユースケースも、機能も違うこともあり、レガシープロジェクトにそれをのっけるよりは</p>

<p>新たなプロジェクトとして１から作ることになった。</p>

<p>当時でてきたRails3での初プロジェクト、多くの部分を開発させてもらえた。</p>

<p>多少の不安と、ワクワク、ドキドキに支配された時間だった。</p>

<p>なにより、足枷がない、フットワークが軽い状態の開発は初めてで、とても幸せな時間を過ごしていたんだなと、今になって思う。</p>

<p>当然エンジニアがいないから、開発は楽じゃなかったけどこの経験は今の生活にも活きてきている。</p>

<p>この時バージョン管理はGitになったし、Hamlを標準で使うようになったし、Hudson(現Jenkins)を導入した。</p>

<h4>進化の速度</h4>

<p>作ったプロダクトが基盤となって、いろんなプロダクトが生まれた。</p>

<p>当時の流行りは今の流行りじゃないことが多くて、そのまま利用されると少し恥ずかしさが残ってしまう。</p>

<p>ただ、進化が速いところはとても好きだ。</p>

<p>Ruby on RailsやWebはいつでもボクを挑戦者にしてくれる。</p>

<p>2ヶ月前のbetterは今のdefactだったり、オワコンだったりと怠けるとすぐに時代遅れになってしまう。</p>

<p>とても楽しい世界だ</p>

<h4>楽をする</h4>

<p>人生は短い</p>

<p>自分のやりたいことをやるに人生は短すぎる。</p>

<p>ボクには面倒な作業で楽をするためのツールとしてRubyがいた</p>

<p>毎日5分かかってた作業が30秒で終わるようになったらそれはとても素晴らしいことで</p>

<p>素晴らしいことを大好きなRubyで行えるということはとても素晴らしいことだと思う。</p>

<p>毎日の退屈な5分間を無くすために、好きなエディタ、好きな言語で楽しくプログラミングをして、時間を使うのはとても有意義だ。</p>

<p>テスト用のアプリ、オレオレ７つ道具、Rubyで解決できる問題も手段もいっぱいある。</p>

<h2>なぜRubyだったんだろう まとめ</h2>

<ul>
<li>まとまらない</li>
<li>Ruby on Railsで社内でトップになれるんじゃないかという野望</li>
<li>Rubyを取り巻く環境が好き</li>
<li>Rubyを書いていると楽しい</li>
<li>継続は力なり</li>
<li>人生は短い!</li>
<li>これからもRubyと付き合って行きたい</li>
</ul>


<p>全然まとまらなかった。</p>

<p>とりあえずこのへんで</p>

<p>押忍!!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hatena BlogをRSS登録]]></title>
    <link href="http://mitaku.github.com/blog/2013/03/17/hatena-blog-rss-feed/"/>
    <updated>2013-03-17T21:39:00+09:00</updated>
    <id>http://mitaku.github.com/blog/2013/03/17/hatena-blog-rss-feed</id>
    <content type="html"><![CDATA[<p>Google Readerのサービス終了予告から、数日が経ちました。</p>

<p>ボクも情報収集の起点には「Google Reader」がいて、
1つの大きな穴が開いてしまった感覚に襲われた。</p>

<p>穴が開きっぱなしだとやっぱり困るので、</p>

<p>補修をすべく<a href="http://feedspot.com/">Feedspot</a>というサービスを試している.</p>

<p>穴は当分埋めれなそうだけど&hellip;</p>

<p>よい機会なのでRSSの整理を始めた。</p>

<h3>本題</h3>

<p>はてなブログをRSS登録しようとしたら、ぱっとfeed飛ばしてそうなURLを見つけれなかったのでメモ</p>

<p><code>http://XXXX.hatenablog.jp/feed</code></p>

<p>で良いみたい。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[高専カンファレンスin東京を開催した]]></title>
    <link href="http://mitaku.github.com/blog/2012/05/03/held-the-kosenconf-045tokyo/"/>
    <updated>2012-05-03T16:31:00+09:00</updated>
    <id>http://mitaku.github.com/blog/2012/05/03/held-the-kosenconf-045tokyo</id>
    <content type="html"><![CDATA[<p>高専カンファレンスin東京を開催した</p>

<p>4月14日に<a href="http://kc045tokyo.heroku.com">高専カンファレンスin東京</a>を開催した話</p>

<h2>開催経緯</h2>

<p>ボクは何をしたくて高専カンファレンスを開催したのだろう?</p>

<ul>
<li>テーマ『DISCOVERY』(発見)</li>
<li>全員発表</li>
<li>小規模開催</li>
<li>自己満足</li>
</ul>


<p>最初は新社会人とか居るだろうし、4月に開催できたら嬉しいなぁと思っていました。
それは現実のモノになったし、ほとんど弊社の新社会人だったけれども個人的には目標を達成しました。
// ただそれは開催の経緯ではなくてボク個人の願望 :)</p>

<p>全員発表という当初の目論見は良い方向でやぶれましたが
多くの人の発表を聞きたい。それが今回の開催目的</p>

<p>「発表することにどんな意義が…」とか
「発表することによって何が…」とか
「発表を聞いたから何が…」っていう話は各個人の価値観なのでおいておいて</p>

<p>せっかく東京という人が多い環境にいるのだから、いろんな人の話を聞きたい、話をしたいってね!</p>

<h2>掲げていたもの</h2>

<p>テーマ『DISCOVERY』とは別に個人的にテーマを設けていました。
そうですね、裏テーマ。</p>

<ul>
<li>省エネ運営</li>
<li>kosenconf003tokyoの雰囲気を出したい</li>
<li>ボクはボクの高専カンファレンスをやる</li>
</ul>


<h3>省エネ運営</h3>

<p>今回は本当にこれを考えてボクの高専カンファレンスをデザインしてました。
どうやったら手軽に、よりよく出来るだろう…？
手を抜きたいというわけではなく、必要と感じるものは手をかけるし、不要だと思ったものは必要になるまでやりませんでした。</p>

<p>個人的に極力やりたくなかったこととして以下のことがありました。</p>

<ul>
<li>メール送受信</li>
<li>発表者選定</li>
<li>過度なサービス</li>
</ul>


<h4>メールの送受信</h4>

<p>そうなんです、この面倒くさい作業
発表申込とか、参加申込とか、資料送付とか…
いいんです、そんなの（ぉぃ</p>

<p>結局開催に至るまで5通のメールしか送信しませんでした。 :)</p>

<h4>発表者選定</h4>

<p>これも面倒な作業ですね。
「枠が溢れたから、選考します。」とか正直やりたくない。
高専カンファレンスに反した発表とか、なにそれ？という話で
そりゃあ公共風俗などなど気をつけなければならないものはあると思うけど、そんな発表する人いるの？
ということで選定とかいいじゃん。めんどくさい(・へ・)</p>

<h4>過度なサービス</h4>

<p>別に過度でもなんでもないかもしれないのですが
開催に必須ではないものですね。
もちろんあることによって満足度が高まる人もいると思うし、ないことによって少し困ってしまった人もいたかもしれないけど…</p>

<ul>
<li>Wi-Fi</li>
<li>マイク</li>
<li>配信</li>
</ul>


<p>ボク自身は配信をするつもりはあんまりなかったのだけど
素敵なチームメンバーが引き受けてくれたので配信することができました。</p>

<h3>kosenconf003tokyoの雰囲気</h3>

<p>これは本当に個人的なテーマでボクの人生が変わるきっかけになった高専カンファレンスなんだけど、この開催の雰囲気を出したかったのです。
どんな会だったのかっていう話はさておき、
@igaiga555さんや@earth2001yさんが003tokyoっぽかったって言ってくれていて本当に嬉しい。</p>

<h3>ボクはボクの高専カンファレンスをする</h3>

<p>そうなんです、この開催は自己満足なんです。
ボクの高専カンファレンスに型は存在していなくて
主催者が(いい意味で)好き勝手やるのが高専カンファレンスなんじゃないの?という心持ちです。</p>

<p>「あの開催ではこうだったのにこの開催はこれがないからダメだ。」
別に言われてもいいけど、そこまで過度に求められても困ります←
ボクの高専カンファレンスには&#8221;お客様&#8221;は存在しないので、
よりよくする方向には持っていきますが利害や費用対効果をみて考えます。</p>

<p>今回申し込みサイトを作ったのですが、それもボクが怠け者なのであーいう形にしました。（バグいっぱいなの知ってるんだよ)
これに関しては別に記事を書きたいな…</p>

<p>ボクの開催する高専カンファレンスは
『場の空気を楽しんでほしい』という想いで動いています!</p>

<h2>謝辞</h2>

<p>46人の仲間達とワイワイガヤガヤ楽しい時間を過ごせました。
<img src="http://farm8.staticflickr.com/7266/7080101361_d1ee23bf65_c.jpg" alt="photo" /></p>

<p>当初の目的通り、多くの人の話を聞いて、多くの人と話せたことがとても幸せです。
// 発表の途中途中で抜けてしまうことが多くちゃんと聞けなかった発表もあるのですが、とても楽しかったです。</p>

<p>会場を提供してくれた<a href="http://optim.co.jp">株式会社オプティム</a>と省エネ運営でかなり足りない部分をカバーしてくれたチームのみんなに感謝をして、一旦kosenconf-045tokyoを終了したいなと思います。</p>

<p>ありがとうございましたっ</p>

<p>押忍!</p>
]]></content>
  </entry>
  
</feed>
