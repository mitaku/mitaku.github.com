<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: advent_calendar | mitaku.log]]></title>
  <link href="http://mitaku.github.com/blog/categories/advent-calendar/atom.xml" rel="self"/>
  <link href="http://mitaku.github.com/"/>
  <updated>2015-12-02T10:25:24+09:00</updated>
  <id>http://mitaku.github.com/</id>
  <author>
    <name><![CDATA[Takumi MIURA]]></name>
    <email><![CDATA[mitaku1104@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Rubyで可逆暗号]]></title>
    <link href="http://mitaku.github.com/blog/2015/12/02/ruby-reversible-cryptography/"/>
    <updated>2015-12-02T01:00:00+09:00</updated>
    <id>http://mitaku.github.com/blog/2015/12/02/ruby-reversible-cryptography</id>
    <content type="html"><![CDATA[<h2>はじめに</h2>

<p>これは <a href="http://www.adventar.org/calendars/1044">【その2】ドリコム Advent Calendar 2015</a> 2日目の記事です</p>

<p>1日目の記事はarihhさんの「<a href="http://arihh.hatenablog.jp/entry/2015/12/01/005948">カンバンの管理に改善を加えたら加速した話 - arihhのブログ</a>」です</p>

<p><a href="http://www.adventar.org/calendars/1043">【その1】ドリコム Advent Calendar 2015 - Adventar</a> もあります!</p>

<p>めっちゃブログ書くのが久しぶりで、このブログの更新の仕方を忘れてたりしました。</p>

<p><strong>あと、モンハンやりたい。モンハンやりたい、モンハンやりたい</strong></p>

<p><em>※エンジニア向けの記事です</em></p>

<h2>本題 - 「Rubyで可逆暗号-その情報を知りたくない僕らは」</h2>

<p>生データとして扱いたくない情報を難読化する話をします!</p>

<p><em>※エンジニア向けの記事です</em></p>

<h3>(エンジニアの自分が)生データとして扱いたくない情報</h3>

<ul>
<li>何かのアカウント(ID/PW)</li>
<li>自分のものじゃない秘密鍵</li>
<li>ユニークなギフトコード</li>
<li>etc&hellip;</li>
</ul>


<p>などなど。思い当たるものはないでしょうか？</p>

<hr />

<p>最近、ドリコムではAWSの活用事例が増えてきました。</p>

<p>AWSを便利に活用させていただいているのですが、必然的にアクセスキーやシークレットキーを取り扱う必要がでてきます。</p>

<p>アクセスキーとシークレットキーが漏れたりすると何が起こるかわかりません。</p>

<p><strong>情報漏えいはシステムよりも人間が原因になることのほうが多い</strong>と教わってきたので</p>

<p>個人的には知らなくてよければ知らないまま過ごしたい情報です。</p>

<p>なので、少しでも心を穏やかにするために、生のデータを扱うの避けて、一工夫して運用しています。</p>

<h3>Rubyで可逆暗号</h3>

<h4>ActiveSupport::MessageEncryptor</h4>

<p>みんなだいすき<code>ActiveSupport</code></p>

<p>それ、<code>ActiveSupport::MessageEncryptor</code>でできるよ!!</p>

<p><a href="http://qiita.com/kengos@github/items/e8ea8f71c47852fde48b">Railsで簡単可逆暗号(ActiveSupport::MessageEncryptor)</a></p>

<pre><code class="ruby">secret = SecureRandom::hex(128)
#=&gt; "13f3bab71cc735eea473e8fd225bb04232d23eadf194bd066179e09871fdf9244b454c38ebd6715e03b903d595b8ac5d75488dff2d9d48f3d2eb5e9a026ebbb4ef799e9596376f63a49640e9336f9b011fa8972a763a6d1fe13b5d4d096a34cdeba91636c86b70e9a88fab56f2a4f6b19eee801ac0d1e3415bb17b8f92f0133b"
encryptor = ::ActiveSupport::MessageEncryptor.new(secret, cipher: 'aes-256-cbc')
encrypt_message = encryptor.encrypt_and_sign("target_message")
#=&gt; "QjlkVndyeERrV3BUcW1paVVkTDJQTWhzV3R5OEV3N3JsR2FnV0VxRjdCTT0tLUJFSmdLTUNFbHdmZHhWcjZUQllUR0E9PQ==--6f6d897b52cfad56d9a31f8a19d44481e5343f18"
encryptor.decrypt_and_verify(encrypt_message) == "target_message"
#=&gt; true
</code></pre>

<p>便利ですね。
これだけだと芸がないので、ドリコムでの事例を紹介します!</p>

<h4>ReversibleCryptography</h4>

<p><a href="https://github.com/mitaku/reversible_cryptography">reversible_cryptography</a></p>

<p>という自作gemを使ってます。</p>

<p>READMEより</p>

<pre><code class="ruby">secret = "password"
encrypted_message = ReversibleCryptography::Message.encrypt("target_message", secret)
#=&gt; "md5:388eeae24576572f946e9043a2118b2d:salt:161-225-182-109-143-90-1-28:aes-256-cfb:DHY6DF3+iFzH36FMbeI="
ReversibleCryptography::Message.decrypt(encrypted_message, secret) == "target_message"
#=&gt; true
</code></pre>

<p>簡単ですね。</p>

<ul>
<li><em>※上記例とは暗号化方式等,諸々違うため堅牢度合いは違います</em></li>
<li><em>※暗号化するものが簡単な英単語だったりする場合,MD5から逆引きされる可能性があります</em></li>
<li><em>※パスワードの強度は高いものを利用しています</em></li>
</ul>


<h3>もう一工夫</h3>

<p>Railsに限った話ではないですがアプリでの利用方法も記載します</p>

<p>各種設定はyamlファイルに記載することが多く、
このようにYAMLのプライベートタイプを追加し環境変数を利用するようにしています。</p>

<pre><code class="ruby">class ReversibleEncryptedString &lt; BasicObject
  def initialize(str)
    @str = str
  end

  def decrypted_string
    @raw ||= ::ReversibleCryptography::Message.decrypt(@str, ::ENV["REVERSIBLE_CRYPTOGRAPY_SECRET"])
  end

  alias_method :to_s, :decrypted_string

  def method_missing(method, *args)
    decrypted_string.__send__(method, *args)
  end
end

YAML.add_private_type("Encrypted") do |_type, val|
  ReversibleEncryptedString.new(val)
end
</code></pre>

<pre><code class="yaml">aws:
  endpoint: "ec2.ap-northeast-1.amazonaws.com"
  access_key_id: !x-private:Encrypted "md5:109a42207275ce753e4923575ace3e12:salt:255-105-253-88-5-107-47-24:aes-256-cfb:4n++p1w8WZrjzmjna8W1mqh6PSA="
  secret_access_key: !x-private:Encrypted "md5:7844e3da7a807eb915207f7a36d4087b:salt:54-109-31-32-93-207-203-85:aes-256-cfb:l1OeNofj0C+vlsWfPfrTwQ=="
</code></pre>

<p>環境変数の設定には<a href="https://github.com/bkeepers/dotenv">Dotenv</a>を利用しているところもあります。</p>

<h3>ReversibleCryptographyの活用プロダクト</h3>

<p>弊社sue445さんのgemでも利用されています!</p>

<ul>
<li><a href="https://github.com/sue445/itamae-plugin-resource-encrypted_remote_file">itamae-plugin-resource-encrypted_remote_file gem</a></li>
<li><a href="http://sue445.hatenablog.com/entry/2015/05/09/185807">itamae-plugin-resource-encrypted_remote_file を作った</a></li>
</ul>


<h2>おわりに</h2>

<ul>
<li><strong>情報漏えいは人が原因のほうが多い!</strong></li>
<li>意識をしつつ、健全な開発をしましょう!</li>
<li>知りたくない情報は暗号化してからもらいましょう!</li>
<li>可逆暗号ができる<a href="https://github.com/mitaku/reversible_cryptography">ReversibleCryptography gem</a>の紹介をしました</li>
<li>気が向いたら使ってみてもらえれば幸いです!</li>
</ul>


<p>ということで次はnakajiさんです!</p>
]]></content>
  </entry>
  
</feed>
